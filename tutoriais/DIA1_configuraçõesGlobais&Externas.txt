üöÄ DIA 1: CONFIGURA√á√ÉO DE MODULE FEDERATION E BASE DE AUTENTICA√á√ÉO
O objetivo do Dia 1 √© configurar a Module Federation entre o Container e o 
Micro-frontend de Autentica√ß√£o (mf-auth) e come√ßar a construir a base de autentica√ß√£o.

ETAPA 1: INSTALAR vite-plugin-federation
Vamos usar o vite-plugin-federation para habilitar a Module Federation no Vite.

1.1 Adicione vite-plugin-federation ao container:

yarn workspace container add -D @originjs/vite-plugin-federation

1.2 Adicione vite-plugin-federation ao mf-auth:

yarn workspace mf-auth add -D @originjs/vite-plugin-federation

ETAPA 2: CONFIGURAR container/vite.config.ts (HOST)
Vamos transformar o container no aplicativo host que ir√° consumir o mf-auth.

2.1 Abra o arquivo apps/container/vite.config.ts e substitua todo o conte√∫do por:

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import federation from '@originjs/vite-plugin-federation'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    react(),
    federation({
      name: 'container',
      remotes: {
        'mf_auth': 'http://localhost:5001/assets/remoteEntry.js', // URL do mf-auth
      },
      shared: ['react', 'react-dom'],
    })
  ],
  build: {
    modulePreload: false,
    target: 'esnext',
    minify: false,
    cssCodeSplit: false
  },
  server: {
    port: 5000, // Porta para o container
  }
})

2.2 Salve o arquivo.

ETAPA 3: CONFIGURAR mf-auth/vite.config.ts (REMOTE)
Agora, vamos configurar o mf-auth como um micro-frontend remoto que exp√µe componentes.

3.1 Abra o arquivo apps/mf-auth/vite.config.ts e substitua todo o conte√∫do por:

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import federation from '@originjs/vite-plugin-federation'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    react(),
    federation({
      name: 'mf_auth',
      filename: 'remoteEntry.js',
      exposes: {
        './AuthButtons': './src/components/AuthButtons.tsx',
        './AuthContext': './src/context/AuthContext.tsx',
        './firebase': './src/firebase.ts',
      },
      shared: ['react', 'react-dom'],
    })
  ],
  build: {
    modulePreload: false,
    target: 'esnext',
    minify: false,
    cssCodeSplit: false
  },
  server: {
    port: 5001, // Porta para o mf-auth
  }
})

3.2 Salve o arquivo.

ETAPA 4: CRIAR mf-auth/src/firebase.ts
Este arquivo ir√° conter a inicializa√ß√£o do Firebase. Por enquanto, ser√° um placeholder.

4.1 Crie o arquivo apps/mf-auth/src/firebase.ts e adicione o seguinte conte√∫do:

// apps/mf-auth/src/firebase.ts
console.log('Firebase initialized (placeholder)');

export const auth = {}; // Placeholder para o objeto auth do Firebase
export const googleProvider = {}; // Placeholder para o provedor Google do Firebase

4.2 Salve o arquivo.

ETAPA 5: CRIAR mf-auth/src/context/AuthContext.tsx
Vamos criar um Context API b√°sico para gerenciar o estado de autentica√ß√£o.

5.1 Crie o arquivo apps/mf-auth/src/context/AuthContext.tsx e adicione o seguinte conte√∫do:

// apps/mf-auth/src/context/AuthContext.tsx
import React, { createContext, useState, useContext, ReactNode } from 'react';

interface AuthContextType {
  user: { id: string; name: string; email: string } | null;
  login: () => void;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<{ id: string; name: string; email: string } | null>(null);

  const login = () => {
    // L√≥gica de login (ser√° implementada com Firebase mais tarde)
    setUser({ id: '123', name: 'Usu√°rio Teste', email: 'teste@example.com' });
    console.log('Login efetuado (dummy)');
  };

  const logout = () => {
    // L√≥gica de logout (ser√° implementada com Firebase mais tarde)
    setUser(null);
    console.log('Logout efetuado (dummy)');
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

5.2 Salve o arquivo.

ETAPA 6: CRIAR mf-auth/src/components/AuthButtons.tsx
Este componente ir√° conter bot√µes de login e logout que usar√£o o AuthContext.

6.1 Crie o arquivo apps/mf-auth/src/components/AuthButtons.tsx e adicione o seguinte conte√∫do:

// apps/mf-auth/src/components/AuthButtons.tsx
import React from 'react';
import { useAuth } from '../context/AuthContext';

const AuthButtons: React.FC = () => {
  const { user, login, logout } = useAuth();

  return (
    <div>
      {user ? (
        <>
          <p>Ol√°, {user.name} ({user.email})</p>
          <button onClick={logout} style={{ padding: '10px', margin: '5px', borderRadius: '5px', border: '1px solid #ccc' }}>
            Logout
          </button>
        </>
      ) : (
        <button onClick={login} style={{ padding: '10px', margin: '5px', borderRadius: '5px', border: '1px solid #007bff', backgroundColor: '#007bff', color: 'white' }}>
          Login com Google (Dummy)
        </button>
      )}
    </div>
  );
};

export default AuthButtons;

6.2 Salve o arquivo.

ETAPA 7: ATUALIZAR mf-auth/src/App.tsx
Vamos envolver a aplica√ß√£o mf-auth com o AuthProvider e renderizar os AuthButtons.

7.1 Abra o arquivo apps/mf-auth/src/App.tsx e substitua todo o conte√∫do por:

// apps/mf-auth/src/App.tsx
import React from 'react';
import './App.css'; // Mantenha o CSS padr√£o do Vite
import { AuthProvider } from './context/AuthContext';
import AuthButtons from './components/AuthButtons';

function App() {
  return (
    <AuthProvider>
      <div style={{ padding: '20px', border: '2px solid blue', borderRadius: '8px', margin: '20px', backgroundColor: '#e6f7ff' }}>
        <h2>Micro-frontend de Autentica√ß√£o</h2>
        <AuthButtons />
      </div>
    </AuthProvider>
  );
}

export default App;

7.2 Salve o arquivo.

ETAPA 8: ATUALIZAR container/src/App.tsx
Agora, vamos importar e renderizar dinamicamente o AuthButtons do mf-auth no nosso container.

8.1 Abra o arquivo apps/container/src/App.tsx e substitua todo o conte√∫do por:

// apps/container/src/App.tsx
import React, { Suspense } from 'react';
import './App.css'; // Mantenha o CSS padr√£o do Vite

// Carrega o Micro-frontend de Autentica√ß√£o dinamicamente
const AuthButtons = React.lazy(() => import('mf_auth/AuthButtons'));

function App() {
  return (
    <div style={{ padding: '30px', border: '2px solid green', borderRadius: '10px', margin: '30px', backgroundColor: '#e6ffe6' }}>
      <h1>Container Principal (Host)</h1>
      <Suspense fallback={<div>Carregando autentica√ß√£o...</div>}>
        <AuthButtons />
      </Suspense>
      {/* Aqui √© onde outros micro-frontends e o restante da aplica√ß√£o ser√£o renderizados */}
    </div>
  );
}

export default App;

8.2 Salve o arquivo.

ETAPA 9: TESTAR A APLICA√á√ÉO
Vamos iniciar os micro-frontends para ver a Module Federation em a√ß√£o.

9.1 Em um terminal, execute o mf-auth:

yarn workspace mf-auth dev

Voc√™ dever√° ver VITE v5.x.x ready in X ms ‚ûú Local: http://localhost:5001/

9.2 Abra um novo terminal (sem fechar o anterior) e execute o container:

yarn workspace container dev

Voc√™ dever√° ver VITE v5.x.x ready in Y ms ‚ûú Local: http://localhost:5000/

9.3 Abra seu navegador e acesse http://localhost:5000/.

O que voc√™ deve ver:
Voc√™ ver√° o Container Principal com uma borda verde, e dentro dele, o conte√∫do do Micro-frontend de Autentica√ß√£o com uma borda azul, contendo os bot√µes de "Login com Google (Dummy)" e a mensagem de "Ol√°, Usu√°rio Teste" ap√≥s clicar no login.

Se tudo estiver funcionando, voc√™ configurou com sucesso a Module Federation entre o seu host e um micro-frontend remoto!

ETAPA 10: FAZER COMMIT DAS MUDAN√áAS
10.1 Pare os servidores (Ctrl + C em ambos os terminais).

10.2 Volte para a raiz do projeto:

cd ../..

10.3 Adicione e commite as mudan√ßas:

git add .
git commit -m "feat: Day 1 - Setup Module Federation for Container and MF-Auth, basic auth context"
git push origin main

Parab√©ns! O Dia 1 est√° completo. Voc√™ tem a estrutura b√°sica de micro-frontends funcionando com Module Federation.